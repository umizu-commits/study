概要
・掲示板一覧画面、掲示板詳細画面に表示される編集リンク・削除リンクは、ログインしているユーザーが投稿した掲示板であれば表示してください。
そうでない場合はそれらは表示しないでください。
・掲示板の投稿者でないユーザーが boards/xxx/edit などのURL直打ちによる編集画面へアクセスした場合にエラー画面が出るようにしてください。
・掲示板の更新・掲示板の削除は、投稿者本人のみが実行可能で、それ以外のユーザーがそれらの操作を試みた場合にはエラー画面が表示されるようにしてください。
＞エラー画面は、gem 'better_errors' を使用せず、Railsデフォルトのエラー画面が表示されるようにしてください。

今回の課題で行わなければならないことを書き出す。
・掲示板編集画面への導線
＞掲示板一覧画面、詳細画面から編集画面へ遷移できるようにする
＞掲示板の投稿者のみが編集画面への導線が表示されるようにする
＞上記のために必要なものを洗い出す

・編集画面の表示・掲示板の更新
＞新規掲示板作成画面と同様のもので、値が入った状態で表示されるようにする
＞/boards/xxx/edit などのURL直打ちによる編集画面へアクセスした場合にエラー画面が表示されるようにする
（gem 'better_errors' を使用せず、Railsデフォルトのエラー画面が表示されるようにする）
＞更新後は「掲示板を更新しました」というフラッシュメッセージと共に掲示板編集画面が表示される
＞上記のために必要なものを洗い出す
・掲示板の削除
＞掲示板一覧画面、詳細画面から削除できるようにする
＞削除のリンクをクリックしたら、「削除しますか」という確認のアラートが画面に表示されるようにする
＞削除後は「掲示板を削除しました」というフラッシュメッセージと共に掲示板一覧画面が表示される
＞上記のために必要なものを洗い出す

調査
・掲示板一覧画面、詳細画面から編集画面へ遷移できるようにする方法
・掲示板の投稿者のみ、編集画面への導線が表示されるようにする方法
・編集画面では、値が入った状態で表示されるようにする方法
・URL直打ちで編集画面へアクセスした場合railsデフォルトのエラー画面が表示されるようにする方法
・更新後、フラッシュメッセージとともに掲示板詳細画面へ遷移させる方法
・掲示板一覧画面、詳細画面から掲示板を削除できるようにする方法
・削除後はフラッシュメッセージとともに掲示板一覧画面へ遷移させる方法

調査結果と概要から何を行う必要があるか大まかなイメージをする
・編集画面への遷移方法は、ルーティング、コントローラーでのアクション定義、ビューでのリンク設定が必要
・投稿者のみが編集画面への導線を表示されるようにするためには、ビューでの条件分岐が必要
・編集画面で値が入った状態で表示されるようにするためには、form_with(model: @board)を使うことで、モデルの属性値が自動的にフォームの初期値としてセットされる。
・URL直打ちで編集画面へアクセスした場合railsデフォルトのエラー画面が表示されるようにする方法は、ActiveRecord::RecordNotFound を raise する。
・更新後、フラッシュメッセージとともに掲示板詳細画面へ遷移させる方法は、redirect_to と flash（notice / alert）を組み合わせる
・掲示板一覧画面、詳細画面から掲示板を削除できるようにする方法は、ビューでのリンク設定、コントローラーでのアクション定義が必要
・削除後はフラッシュメッセージとともに掲示板一覧画面へ遷移させる方法は、destroy アクション内で redirect_to boards_path, notice: "..." を書き、
レイアウトに <%= notice %> を置く

調べた内容も含めての実装イメージを書き出す。
■掲示板編集画面への導線
-ルーティング
resources :boards によって edit アクションと edit_board_path が生成される
-ビューへのリンク
<%= link_to '編集', edit_board_path(board) %>
-投稿者のみ表示する制御
<% if board.user == current_user %>
  <%= link_to '編集', edit_board_path(board) %>
<% end %>
■編集画面の表示・掲示板の更新
-コントローラー（edit, update アクション）
def edit
  @board = Board.find(params[:id])
end

def update
  @board = Board.find(params[:id])
  if @board.update(board_params)
    redirect_to @board, notice: "掲示板を更新しました"
  else
    render :edit, status: :unprocessable_entity
  end
end
-フォーム
新規作成画面で使った _form.html.erb を編集でも再利用する
form_with(model: @board) を使うと、自動的に編集時は既存の値がフォームに反映される
-URL直打ちでアクセスした場合のエラー画面
存在しないIDを指定した場合、find が ActiveRecord::RecordNotFound を発生させ、Rails 標準の 404 エラーページが表示される
-フラッシュメッセージ
redirect_to @board, notice: "掲示板を更新しました" でセット
レイアウトで <%= notice %> を表示する
■掲示板の削除
-コントローラ（destroy アクション）
def destroy
  @board = Board.find(params[:id])
  @board.destroy
  redirect_to boards_path, notice: "掲示板を削除しました"
end
-ビューの削除リンク
<%= link_to '削除', board_path(board),
            method: :delete,
            data: { confirm: '削除しますか？' } %>
-フラッシュメッセージ
destroy 後に redirect_to boards_path, notice: "掲示板を削除しました"
レイアウトで <%= notice %> を表示