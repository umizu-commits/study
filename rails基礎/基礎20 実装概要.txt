概要
以下を満たすパスワードリセット機能を実装してください。


gem 'sorcery'のreset_password（submodules）を使ったパスワードリセット機能実装。
・パスワードリセット申請時に「パスワードリセット手順を送信しました」と表示されること。
・存在しないメールアドレスからのパスワードリセット申請時にも「パスワードリセット手順を送信しました」と表示されること。
・パスワードリセット申請を行うと、ログインページへリダイレクトされること。
・送信されるメール：
＞差し出し元（from）は from@example.com であること。
＞件名は「パスワードリセット」であること。
＞app/mailers/user_mailer.rbのreset_password_emailメソッドでパスワードリセットメールが送信されること。
＞パスワードリセット申請画面の送信ボタンは「送信」であること。
＞パスワードリセット画面の送信ボタンは「更新」であること。
gem 'letter_opener', '2.0.0'を使った開発環境でのメール確認。
gem 'config'を使った設定管理。

調査
・gem 'sorcery'のreset_password（submodules）を使ったパスワードリセット機能実装の方法
・定型のメールの自動送信方法
・gem 'letter_opener'とは
・gem 'config'を使った設定管理とは

調査結果
・Sorcery は Rails アプリに認証機能を追加できるライブラリで、ActiveRecord や Mongoid など複数の ORM をサポートしています。
・パスワードリセットは、load_from_reset_password_token
・letter_openerについて、メールを送信する代わりに、デフォルトのブラウザでプレビューできます。
これにより、開発環境でメール配信を設定する必要がなくなり、誤ってテストメールを他人のアドレスに送信してしまう心配がなくなります。
・Config を使用すると、環境固有の設定を簡単かつ使いやすい方法で管理できます。 

・メールの自動送信はAction Mailerで実装
$ bin/rails generate mailer User
create  app/mailers/user_mailer.rb
invoke  erb
create    app/views/user_mailer
invoke  test_unit
create    test/mailers/user_mailer_test.rb
create    test/mailers/previews/user_mailer_preview.rb

＞差し出し元（from）は from@example.com であること。
# app/mailers/application_mailer.rb
class ApplicationMailer < ActionMailer::Base
  default from: "from@example.com"
  layout "mailer"
end

＞件名は「パスワードリセット」であること。
class UserMailer < ApplicationMailer
  default from: "notifications@example.com"

  def reset_password_email
    @user = params[:user]
    @url  = "http://example.com/login"
    mail(to: @user.email, subject: "パスワードリセット")
  end
end

＞パスワードリセット画面のメーラービューを作成


今回の課題で行わなければならないことを書き出す。
・gem 'letter_opener', '2.0.0'のインストール
・gem 'config'のインストール
・パスワードリセット実装 load_from_reset_password_token
・メッセージ設定 yaml
・パスワードリセット申請を行うと、ログインページへリダイレクトされる redirect_back_or_to
・送信メールの設定 Action Mailerで実装
・パスワードリセット画面の実装
・ボタンの実装＆設定
